Index: include/clang/Basic/LangOptions.def
===================================================================
--- include/clang/Basic/LangOptions.def	(revision 175161)
+++ include/clang/Basic/LangOptions.def	(working copy)
@@ -169,6 +169,8 @@
 
 BENIGN_LANGOPT(RetainCommentsFromSystemHeaders, 1, 0, "retain documentation comments from system headers in the AST")
 
+LANGOPT(MemoryTracer , 1, 0, "Log all memory accesses")
+
 /// Runtime sanitizers.
 #define SANITIZER(NAME, ID) \
 BENIGN_LANGOPT(Sanitize##ID, 1, 0, NAME " sanitizer")
Index: include/clang/Driver/Options.td
===================================================================
--- include/clang/Driver/Options.td	(revision 175161)
+++ include/clang/Driver/Options.td	(working copy)
@@ -298,6 +298,10 @@
 def fno_address_sanitizer : Flag<["-"], "fno-address-sanitizer">, Group<f_Group>;
 def fthread_sanitizer : Flag<["-"], "fthread-sanitizer">, Group<f_Group>;
 def fno_thread_sanitizer : Flag<["-"], "fno-thread-sanitizer">, Group<f_Group>;
+
+def fmemory_tracer : Flag<["-"], "fmemory-tracer">, Group<f_Group>, Flags<[CC1Option]>;
+def fno_memory_tracer : Flag<["-"], "fno-memory-tracer">, Group<f_Group>, Flags<[CC1Option]>;
+
 def fasm : Flag<["-"], "fasm">, Group<f_Group>;
 
 def fasm_blocks : Flag<["-"], "fasm-blocks">, Group<f_Group>;
Index: lib/Frontend/CompilerInvocation.cpp
===================================================================
--- lib/Frontend/CompilerInvocation.cpp	(revision 175161)
+++ lib/Frontend/CompilerInvocation.cpp	(working copy)
@@ -1238,6 +1238,8 @@
   Opts.ApplePragmaPack = Args.hasArg(OPT_fapple_pragma_pack);
   Opts.CurrentModule = Args.getLastArgValue(OPT_fmodule_name);
 
+  Opts.MemoryTracer = Args.hasArg(OPT_fmemory_tracer);
+
   // Record whether the __DEPRECATED define was requested.
   Opts.Deprecated = Args.hasFlag(OPT_fdeprecated_macro,
                                  OPT_fno_deprecated_macro,
Index: lib/Driver/Tools.cpp
===================================================================
--- lib/Driver/Tools.cpp	(revision 175161)
+++ lib/Driver/Tools.cpp	(working copy)
@@ -2453,6 +2453,12 @@
   SanitizerArgs Sanitize(D, Args);
   Sanitize.addArgs(Args, CmdArgs);
 
+  if (Args.hasFlag(options::OPT_fmemory_tracer,
+                   options::OPT_fno_memory_tracer,
+                   false))
+    CmdArgs.push_back("-fmemory-tracer");
+
+
   // Report and error for -faltivec on anything other then PowerPC.
   if (const Arg *A = Args.getLastArg(options::OPT_faltivec))
     if (!(getToolChain().getTriple().getArch() == llvm::Triple::ppc ||
Index: lib/CodeGen/BackendUtil.cpp
===================================================================
--- lib/CodeGen/BackendUtil.cpp	(revision 175161)
+++ lib/CodeGen/BackendUtil.cpp	(working copy)
@@ -168,6 +168,11 @@
   PM.add(createThreadSanitizerPass());
 }
 
+static void addMemoryTracerPass(const PassManagerBuilder &Builder,
+                                   PassManagerBase &PM) {
+  PM.add(createMemoryTracerPass());
+}
+
 void EmitAssemblyHelper::CreatePasses(TargetMachine *TM) {
   unsigned OptLevel = CodeGenOpts.OptimizationLevel;
   CodeGenOptions::InliningMethod Inlining = CodeGenOpts.getInlining();
@@ -219,6 +224,13 @@
                            addThreadSanitizerPass);
   }
 
+  if (LangOpts.MemoryTracer) {
+    PMBuilder.addExtension(PassManagerBuilder::EP_OptimizerLast,
+                           addMemoryTracerPass);
+    PMBuilder.addExtension(PassManagerBuilder::EP_EnabledOnOptLevel0,
+                           addMemoryTracerPass);
+  }
+
   // Figure out TargetLibraryInfo.
   Triple TargetTriple(TheModule->getTargetTriple());
   PMBuilder.LibraryInfo = new TargetLibraryInfo(TargetTriple);
